From 98474c28eaa08c2ae400e46c445bdd704357fde8 Mon Sep 17 00:00:00 2001
From: Dan O'Donovan <dan@emutex.com>
Date: Tue, 15 Mar 2016 21:48:21 +0000
Subject: [PATCH 1/2] spi: spi-pxa2xx: use cs_gpio if valid

The spi_device structure contains a field named cs_gpio, which
can be used to specify a GPIO pin to use for chip-select
signalling.  This gpio will be used only if valid and if other
supported methods for overriding the chip-select signalling
are not invoked (i.e. control_cs or gpio_cs in controller_data).

Signed-off-by: Dan O'Donovan <dan@emutex.com>
---
 drivers/spi/spi-pxa2xx.c | 30 +++++++++++++++++-------------
 1 file changed, 17 insertions(+), 13 deletions(-)

diff --git a/drivers/spi/spi-pxa2xx.c b/drivers/spi/spi-pxa2xx.c
index fe20d83..6661a15 100644
--- a/drivers/spi/spi-pxa2xx.c
+++ b/drivers/spi/spi-pxa2xx.c
@@ -1072,7 +1072,7 @@ static int setup_cs(struct spi_device *spi, struct chip_data *chip,
 {
 	int err = 0;
 
-	if (chip == NULL || chip_info == NULL)
+	if (!chip)
 		return 0;
 
 	/* NOTE: setup() can be called multiple times, possibly with
@@ -1082,26 +1082,30 @@ static int setup_cs(struct spi_device *spi, struct chip_data *chip,
 		gpio_free(chip->gpio_cs);
 
 	/* If (*cs_control) is provided, ignore GPIO chip select */
-	if (chip_info->cs_control) {
+	if (chip_info && chip_info->cs_control) {
 		chip->cs_control = chip_info->cs_control;
 		return 0;
 	}
 
-	if (gpio_is_valid(chip_info->gpio_cs)) {
-		err = gpio_request(chip_info->gpio_cs, "SPI_CS");
-		if (err) {
-			dev_err(&spi->dev, "failed to request chip select GPIO%d\n",
-				chip_info->gpio_cs);
-			return err;
-		}
-
+	if (chip_info && gpio_is_valid(chip_info->gpio_cs))
 		chip->gpio_cs = chip_info->gpio_cs;
-		chip->gpio_cs_inverted = spi->mode & SPI_CS_HIGH;
+	else if (gpio_is_valid(spi->cs_gpio))
+		chip->gpio_cs = spi->cs_gpio;
+	else
+		return 0;
 
-		err = gpio_direction_output(chip->gpio_cs,
-					!chip->gpio_cs_inverted);
+	err = gpio_request(chip->gpio_cs, "SPI_CS");
+	if (err) {
+		dev_err(&spi->dev, "failed to request chip select GPIO%d\n",
+			chip_info->gpio_cs);
+		return err;
 	}
 
+	chip->gpio_cs_inverted = spi->mode & SPI_CS_HIGH;
+
+	err = gpio_direction_output(chip->gpio_cs,
+				    !chip->gpio_cs_inverted);
+
 	return err;
 }
 
-- 
2.1.4

